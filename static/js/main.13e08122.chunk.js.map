{"version":3,"sources":["containers/xizachBoard/components/Card/Card.js","containers/xizachBoard/components/MainBoard/PlayerBoard/PlayerBoard.js","containers/xizachBoard/components/Spinner/Spinner.js","containers/xizachBoard/components/MainBoard/AiBoard/AiBoard.js","containers/xizachBoard/components/MainBoard/MainBoard.js","containers/xizachBoard/components/SideBoard/MoneyBoard/MoneyBoardInfo/MoneyBoardInfo.js","containers/xizachBoard/components/SideBoard/MoneyBoard/MoneyBoardBet/MoneyBoardBet.js","containers/xizachBoard/components/SideBoard/MoneyBoard/MoneyBoard.js","containers/xizachBoard/components/SideBoard/SideBoard.js","containers/xizachBoard/components/BoardContainer.js","containers/xizachBoard/LayoutBoard.js","App.js","serviceWorker.js","index.js"],"names":["symbols","card","props","item","number","symbol","className","playerBoard","scoreBar","cards","total","play","map","index","key","i","length","push","Math","random","spinner","aiBoard","loading","aiTurn","mainBoard","aiCards","totalAi","playerCards","totalPlayer","moneyBoardInfo","money","moneyBoardBet","betMoney","onClick","moneyOnBet","moneyBoard","MoneyBoardInfo","MoneyBoardBet","totalBet","sideBoard","newGame","clicked","aiCardsHandler","boardContainer","state","firstPlay","ai","player","pickedCards","playerMoney","canBet","canNewGame","disabling","playerCardHandler","setState","drawCard","randomNumber","randomSymbol","includes","min","alert","newGameHandler","some","cardsHandler","totalAiCard","timer","setInterval","clearInterval","betMoneyHandler","this","playerTotal","Component","layout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13e08122.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst symbols = ['♥', '♦', '♣', '♠'];\r\n\r\nconst card = (props) => {\r\n    let [number, symbol] = props.item;\r\n    if (number === 11 ) number = 'J';\r\n    else if (number === 12 ) number = 'Q';\r\n    else if (number === 13 ) number = 'K';\r\n    else if (number === 1) number = 'A';\r\n\r\n    return (\r\n        <div className=\"card-card\">\r\n            <div className=\"card-item\">\r\n                <p className = {symbol < 2 ? 'card-item-red' : null}> {number}{symbols[symbol]} </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default card;","import React from 'react';\r\n\r\nimport './PlayerBoard.css';\r\nimport Card from '../../Card/Card';\r\n\r\nconst playerBoard = (props) => {\r\n    let scoreBar = null;\r\n    let cards = [];\r\n\r\n    let total = props.total;\r\n    if (total === 21.5) {\r\n        total = 'Xì Zách'\r\n    } else if (total > 100) {\r\n        total = `Ngũ Linh ${total%100}`;\r\n    }\r\n\r\n    if (props.play) {\r\n        scoreBar =(\r\n            <div className=\"playerBoard-score\">\r\n                <p> {total} </p>\r\n            </div>);\r\n\r\n            cards = props.cards.map((card, index) => {\r\n                return <Card \r\n                    item = {card}\r\n                    key = {index}\r\n                    />\r\n        })\r\n        \r\n        for (let i = 0; i < 2; i++) {\r\n            if (cards.length < 2)\r\n                cards.push(<div className=\"card-holder\" key = {~~(Math.random()*10000)}></div>);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"playerBoard\">\r\n            {cards}\r\n            {scoreBar}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default playerBoard;","import React from 'react';\r\n\r\nimport './Spinner.css';\r\n\r\nconst spinner = () => (\r\n    <>\r\n        <div className=\"lds-spinner\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    </>\r\n);\r\n\r\nexport default spinner;","import React from 'react';\r\n\r\nimport './AiBoard.css';\r\nimport Card from '../../Card/Card';\r\nimport Spinner from '../../Spinner/Spinner';\r\n\r\nconst aiBoard = (props) => {\r\n    let cards = [];\r\n    let scoreBar = null;\r\n    let loading = null;\r\n\r\n    let total = props.total;\r\n    if (total === 21.6) {\r\n        total = 'Xì Zách';\r\n    } else if (total > 100) {\r\n        total = `Ngũ Linh ${total%100}`;\r\n    }\r\n\r\n    if (props.play) {\r\n        cards = props.cards.map((card, index) => {\r\n                return <Card \r\n                    item = {card}\r\n                    key = {index}\r\n                    />\r\n        })\r\n        \r\n        for (let i = 0; i < 2; i++) {\r\n            if (cards.length < 2)\r\n                cards.push(<div className=\"card-holder\" key = {~~(Math.random()*10000)}></div>);\r\n        }\r\n\r\n        scoreBar =(\r\n            <div className=\"aiBoard-score\">\r\n                <p> {total} </p>\r\n            </div>);\r\n    }\r\n\r\n    if (props.aiTurn)\r\n        loading = (<div className=\"aiBoard-loading\"> <Spinner /> </div>);\r\n\r\n    return (\r\n        <div className=\"aiBoard\">\r\n            {loading}\r\n            {cards}\r\n            {scoreBar}\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default aiBoard;","import React from 'react';\r\n\r\nimport './MainBoard.css';\r\nimport PlayerBoard from './PlayerBoard/PlayerBoard';\r\nimport AiBoard from './AiBoard/AiBoard';\r\n\r\nconst mainBoard = (props) => (\r\n    <div className=\"mainboard-mainboard\">\r\n        <AiBoard \r\n            play = {props.play}\r\n            cards = {props.aiCards} \r\n            total = {props.totalAi}\r\n            aiTurn = {props.aiTurn}\r\n        />\r\n        <PlayerBoard\r\n            play = {props.play}\r\n            cards = {props.playerCards} \r\n            total = {props.totalPlayer}\r\n        />\r\n\r\n    </div>\r\n);\r\n\r\nexport default mainBoard;","import React from 'react';\r\n\r\nconst moneyBoardInfo = (props) => (\r\n    <div className=\"MoneyBoard-info\">\r\n        <p>Số dư tài khoản</p>\r\n        <p> ${props.money} </p>\r\n    </div>\r\n);\r\n\r\nexport default moneyBoardInfo;","import React from 'react';\r\n\r\nconst moneyBoardBet = (props) => {\r\n    const money = [100, 200, 500, 1000, 2000, 5000];\r\n    return (\r\n        <>\r\n            <div className=\"MoneyBoard-bet\">\r\n                {money.map(betMoney => {\r\n                    return (\r\n                        <button \r\n                            key = {betMoney}\r\n                            onClick = {() => props.betMoney(betMoney)}\r\n                        >\r\n                            {betMoney}\r\n                        </button>\r\n                    );\r\n                })}\r\n\r\n\r\n            </div>\r\n            <div className=\"MoneyBoard-TotalBet\">\r\n                <p>Tổng số tiền đang đặt:</p>\r\n                <p> ${props.moneyOnBet ? props.moneyOnBet : 0} </p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default moneyBoardBet;","import React from 'react';\r\n\r\nimport './MoneyBoard.css';\r\nimport MoneyBoardInfo from './MoneyBoardInfo/MoneyBoardInfo';\r\nimport MoneyBoardBet from './MoneyBoardBet/MoneyBoardBet'\r\n\r\nconst moneyBoard = (props) => (\r\n    <div className=\"MoneyBoard\">\r\n        <MoneyBoardInfo money = {props.money} />\r\n        <MoneyBoardBet \r\n            total = {props.totalBet}\r\n            betMoney = {props.betMoney}\r\n            moneyOnBet = {props.moneyOnBet}\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default moneyBoard;","import React from 'react';\r\n\r\nimport './SideBoard.css';\r\nimport MoneyBoard from './MoneyBoard/MoneyBoard'\r\n\r\nconst sideBoard = (props) => (\r\n    <div className=\"sideboard-sideboard\">\r\n        <MoneyBoard \r\n            money = {props.money} \r\n            betMoney = {props.betMoney}\r\n            moneyOnBet = {props.moneyOnBet}\r\n        />\r\n        <button onClick = {props.newGame}> Game mới </button>\r\n        <button onClick = {props.clicked}> Bốc bát họ! </button>\r\n        <button onClick = {props.aiCardsHandler}> Thôi! </button>\r\n        \r\n    </div>\r\n);\r\n\r\nexport default sideBoard;","import React, { Component } from 'react';\r\n\r\nimport './BoardContainer.css';\r\nimport MainBoard from './MainBoard/MainBoard';\r\nimport SideBoard from './SideBoard/SideBoard';\r\n\r\nclass boardContainer extends Component {\r\n    // Chia lấy dư 13 => số lá. -> number ( 1 - 13)\r\n    // Chia lấy nguyên 13 => chất. -> symbol ( 0 -> 4)\r\n    // picked number*10 + symbol\r\n    state = {\r\n        firstPlay: true, //Lần loading đầu tiên\r\n        ai: [], // bài của cái -> [1 - 13, 0 - 4]\r\n        totalAi: 0, //tổng bài của cái\r\n        player: [], // bài của người chơi\r\n        totalPlayer: 0, //tổng bài của người chơi\r\n        pickedCards: [], // các lá đã rút\r\n        aiTurn: false, //Lượt bốc của AI\r\n        playerMoney: 5000, //Tiền ban đầu của người chơi\r\n        moneyOnBet: 0, // Tiền đang đặt để chơi\r\n        canBet: true, //Có thể đặt tiền hay không\r\n        canNewGame: true, //có thể bắt đầu chơi mới hay không.\r\n        disabling: false, // disable các nút sau khi hạ bài\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.newGameHandler(0);\r\n    }\r\n\r\n    // Rút thêm 1 lá\r\n    playerCardHandler = () => {\r\n        if (this.state.disabling) return ;\r\n\r\n        if (!this.state.moneyOnBet) {\r\n            alert(\"Đặt tiền đi rồi bốc ông nội!\");\r\n            return ;\r\n        }\r\n        this.setState({\r\n            canNewGame: false,\r\n        });\r\n\r\n        const playerCards = [...this.state.player];\r\n        const pickedCards = [...this.state.pickedCards];\r\n        let totalPlayer = this.state.totalPlayer;\r\n        \r\n        const drawCard = () => {\r\n            if (playerCards.length < 5 && totalPlayer < 30 && !this.state.firstPlay) {\r\n                let randomNumber;\r\n                let randomSymbol;\r\n        \r\n                do {\r\n                    randomNumber = 1 + ~~(Math.random() * 13);\r\n                    randomSymbol = ~~(Math.random() * 4);\r\n                } while (pickedCards.includes(randomNumber*10 + randomSymbol));\r\n    \r\n                playerCards.push([randomNumber, randomSymbol]);\r\n                pickedCards.push(randomNumber*10 + randomSymbol);\r\n                totalPlayer += Math.min(randomNumber, 10);\r\n            }\r\n    \r\n            this.setState({\r\n                player: playerCards, \r\n                totalPlayer: totalPlayer,\r\n                pickedCards: pickedCards,\r\n                canBet: false,\r\n            });\r\n        }\r\n\r\n        drawCard();\r\n        if (playerCards.length < 2){\r\n            drawCard();\r\n        }\r\n    }\r\n\r\n    // Tạo 1 match game mới\r\n    newGameHandler = () => {\r\n        if (!this.state.canNewGame) {\r\n            alert('Ai cho chơi game mới lúc này');\r\n            return ;\r\n        }\r\n\r\n        this.setState({\r\n            firstPlay: false,\r\n            ai: [],\r\n            totalAi: 0,\r\n            player: [],\r\n            totalPlayer: 0,\r\n            pickedCards: [],\r\n            moneyOnBet: 0,\r\n            canBet: true,\r\n            disabling: false,\r\n        })\r\n    }\r\n\r\n    //Bài của cái\r\n    aiCardsHandler = () => {\r\n        if (this.state.disabling) return ;\r\n        this.setState({disabling: true});\r\n\r\n        let totalPlayer = this.state.totalPlayer;\r\n\r\n        if (this.state.player.length === 2 &&\r\n            this.state.player.some(card => card[0] === 1) &&\r\n            this.state.player.some(card => card[0] >= 10)) {\r\n                totalPlayer = 21.5;\r\n                this.setState({totalPlayer: totalPlayer})\r\n        } else if (this.state.player.length === 5 && this.state.totalPlayer < 22) {\r\n            totalPlayer = 21.6;\r\n            this.setState({totalPlayer: this.state.totalPlayer + 100})\r\n        }\r\n\r\n        if (totalPlayer < 16) {\r\n                    if (totalPlayer) alert('Bạn phải trên 16 nút mới được thôi!');\r\n                    return ;\r\n                }\r\n                \r\n        const cardsHandler = () => {\r\n            const pickedCards = [...this.state.pickedCards];\r\n            const aiCards = [...this.state.ai];\r\n            let totalAi = this.state.totalAi;\r\n            let randomNumber;\r\n            let randomSymbol;\r\n    \r\n            do {\r\n                randomNumber = 1 + ~~(Math.random() * 13);\r\n                randomSymbol = ~~(Math.random() * 4);\r\n            } while (pickedCards.includes(randomNumber*10 + randomSymbol));\r\n\r\n            aiCards.push([randomNumber, randomSymbol]);\r\n            pickedCards.push(randomNumber*10 + randomSymbol);\r\n            totalAi += Math.min(randomNumber, 10);\r\n\r\n            totalAiCard = totalAi;\r\n            if (aiCards.length === 2 &&\r\n                aiCards.some(card => card[0] === 1) &&\r\n                aiCards.some(card => card[0] >= 10)) {\r\n                    totalAiCard = 21.6;\r\n                    this.setState({totalAi: totalAiCard});\r\n            } else if (aiCards.length === 5 && totalAiCard < 22) {\r\n                totalAiCard = 21.7;\r\n                this.setState({totalAi: totalAi + 100});\r\n            } else {\r\n                this.setState({totalAi: totalAi});\r\n            }\r\n    \r\n            this.setState({\r\n                ai: aiCards,\r\n                pickedCards: pickedCards,\r\n            })\r\n        }\r\n\r\n        let totalAiCard = 0;\r\n        this.setState({aiTurn: true});\r\n\r\n        cardsHandler();\r\n        \r\n        let timer = setInterval(() => {\r\n            // if (this.state.ai.length < 5 )\r\n            if(totalAiCard < totalPlayer && totalPlayer < 22) {\r\n                cardsHandler();\r\n            }\r\n            else if (totalPlayer >= 22 && totalAiCard < 15) {\r\n                cardsHandler();\r\n            }\r\n            else if (totalAiCard === totalPlayer && totalAiCard <= 17 ) {\r\n                    cardsHandler();\r\n            }\r\n            else {\r\n                let playerMoney = this.state.playerMoney;\r\n\r\n                if (totalPlayer >= 22) { // người chơi ngoắc\r\n                    if (totalAiCard < 22) // đủ nút ăn tiền\r\n                        playerMoney -= this.state.moneyOnBet;\r\n\r\n                } else {\r\n                    if (totalAiCard >= 22) // cái ngoắc\r\n                        playerMoney += this.state.moneyOnBet;\r\n                    else { // <= 21 thì so nút\r\n                        if (totalAiCard > totalPlayer)\r\n                            playerMoney -= this.state.moneyOnBet;\r\n                        else if (totalAiCard < totalPlayer)\r\n                            playerMoney += this.state.moneyOnBet;\r\n                    }\r\n                }\r\n\r\n                clearInterval(timer);\r\n                this.setState({\r\n                    aiTurn: false,\r\n                    playerMoney: playerMoney,\r\n                    canNewGame: true,\r\n                });\r\n            }\r\n        }, 2000);\r\n\r\n    }\r\n\r\n    //Đặt tiền\r\n    betMoneyHandler = (money) => {\r\n        if (!this.state.canBet) {\r\n            alert('Không thể đặt tiền vào lúc này!');\r\n            return ;\r\n        }\r\n        \r\n        if (money + this.state.moneyOnBet > this.state.playerMoney) {\r\n            alert('Không đủ tiền mời nạp thêm!');\r\n        } else {\r\n            this.setState({moneyOnBet: this.state.moneyOnBet + money});\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"board-board\">\r\n                <MainBoard \r\n                    play = {!this.state.firstPlay}\r\n                    playerCards = {this.state.player}\r\n                    aiCards = {this.state.ai}\r\n                    totalAi = {this.state.totalAi}\r\n                    totalPlayer = {this.state.totalPlayer}\r\n                    aiTurn = {this.state.aiTurn}\r\n                />\r\n\r\n                <SideBoard \r\n                    playerTotal = {this.state.totalPlayer}\r\n                    clicked = {this.playerCardHandler} \r\n                    newGame = {this.newGameHandler}\r\n                    aiCardsHandler = {this.aiCardsHandler}\r\n                    money = {this.state.playerMoney}\r\n                    betMoney = {this.betMoneyHandler}\r\n                    moneyOnBet = {this.state.moneyOnBet}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default boardContainer;","import React from 'react';\r\n\r\nimport './LayoutBoard.css';\r\nimport BoardContainer from './components/BoardContainer';\r\n\r\nconst layout = () => (\r\n    <BoardContainer />\r\n);\r\n\r\n\r\nexport default layout;","import React from 'react';\nimport Layout from './containers/xizachBoard/LayoutBoard';\n\nfunction App() {\n  return (\n   <Layout />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}